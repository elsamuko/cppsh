#!/usr/bin/env bash

if [ $# -lt 1 ]; then
    echo "Usage:"
    echo " * cppsh source.cpp"
    echo " * or add \"#!/usr/bin/env cppsh\" on top of your source file and execute it directly"
    echo " * if the source file does not exist, it is created with a hello world stump"
    exit 1
fi

# GNU grep is ggrep on macOS
if [ "$(uname)" == "Darwin" ]; then
    GREP="ggrep"
    TEMP_DIR="${TMPDIR}cppsh"
else
    TEMP_DIR="/tmp/cppsh"
    GREP="grep"
fi

ORIG="$1"
BASE=$(basename "$ORIG")
DIR=$(dirname "$ORIG")

TEMP_CPP="$TEMP_DIR/$BASE"
BIN="$TEMP_DIR/${BASE%.cpp}.exe"
HELPER="$TEMP_DIR/compile.bat"
LOG="$TEMP_DIR/error.log"

function createHelper {
    local VERSIONS=("2019" "2017")
    local EDITIONS=("BuildTools" "Community" "Professional" "Enterprise")

    for VERSION in "${VERSIONS[@]}"; do
        for EDITION in "${EDITIONS[@]}"; do
            local VCVARS_DIR="C:/Program Files (x86)/Microsoft Visual Studio/$VERSION/$EDITION/VC/Auxiliary/Build"
            if [ -d "$VCVARS_DIR" ]; then
                export VSNEWCOMNTOOLS="${VCVARS_DIR////\\}"
                break 2
            fi
        done
    done

    echo -e '@echo off\r\n' > "$HELPER"
    
    # VS 2017/2019 Professional/BuildTools/Community
    if [ -n "$VSNEWCOMNTOOLS" ]; then
        echo -ne "call \"$VSNEWCOMNTOOLS\\\\vcvars64.bat\"" >> "$HELPER"
    # VS 2015
    elif [ -n "$VS140COMNTOOLS" ]; then
        echo -ne 'call "%VS140COMNTOOLS%..\\..\\VC\\bin\\amd64\\vcvars64.bat"' >> "$HELPER"
    # VS 2013
    elif [ -n "$VS120COMNTOOLS" ]; then
        echo -ne 'call "%VS120COMNTOOLS%..\\..\\VC\\bin\\amd64\\vcvars64.bat"' >> "$HELPER"
    # VS 2012
    elif [ -n "$VS110COMNTOOLS" ]; then
        echo -ne 'call "%VS110COMNTOOLS%..\\..\\VC\\bin\\amd64\\vcvars64.bat"' >> "$HELPER"
    fi
    
    echo -e ' > nul\r\n' >> "$HELPER"
    echo -e 'cl /EHsc /std:c++17 /nologo /D"_UNICODE" /D"UNICODE" %*' >> "$HELPER"
    chmod +x "$HELPER"
}

function pleaseRemove {
    if [ -f "$1" ]; then
        rm "$1"
    fi
}

function doPrepare {
    mkdir -p $TEMP_DIR
    pleaseRemove "$TEMP_CPP"
    pleaseRemove "$HELPER"
    pleaseRemove "$LOG"
}

function maybeCreate {
    # exit if arg is a folder
    if [ -d "$ORIG" ]; then
        echo "Cannot compile a folder: $ORIG"
        exit 1
    fi

    # create if arg does not exit
    if [ ! -f "$ORIG" ]; then
        echo -n "#!/usr/bin/env cppsh
// cppsh::VERBOSE 1
#include <iostream>

int main() {
    std::cout << \"Hello from generated $BASE\" << std::endl;
    return 0;
}
" > "$ORIG"

        # check if file exists now
        if [ ! -f "$ORIG" ]; then
            echo "Could not write to $ORIG"
            exit 1
        fi

        chmod +x "$ORIG"
    fi
}

function removeHeader {
    case $(head -n 1 "$ORIG" | xargs) in
        '#!'*)
            echo "// auto-generated" > "$TEMP_CPP"
            tail -n +2 "$ORIG" >> "$TEMP_CPP"
            ;;
        *)
            cp "$ORIG" "$TEMP_CPP"
            ;;
    esac
}

function calcHash {
    case $(uname) in
        Darwin)
            MD5SUM=$(md5 "$TEMP_CPP" | cut -d ' ' -f 4)
            ;;
        *)
            MD5SUM=$(md5sum "$TEMP_CPP" | cut -d ' ' -f 1)
            ;;
    esac
    BIN="$TEMP_DIR/$MD5SUM.exe"
}

function getFlags {
    CPPFLAGS=$($GREP -Po '(?<=cppsh::CPPFLAGS).*' < "$TEMP_CPP")
    CXXFLAGS=$($GREP -Po '(?<=cppsh::CXXFLAGS).*' < "$TEMP_CPP")
     LDFLAGS=$($GREP -Po '(?<=cppsh::LDFLAGS).*'  < "$TEMP_CPP")
        LIBS=$($GREP -Po '(?<=cppsh::LIBS).*'     < "$TEMP_CPP")
     VERBOSE=$($GREP -Po '(?<=cppsh::VERBOSE).*'  < "$TEMP_CPP")
}

function doCompile {
    # compile, if not already compiled
    if [ ! -f "$BIN" ]; then

        getFlags
        cd "$DIR" || return

        case $(uname) in
            Linux)
                [[ -n "$VERBOSE" ]] && echo "g++ -I. $CPPFLAGS -std=c++17 $CXXFLAGS \"$TEMP_CPP\" -o \"$BIN\" $LDFLAGS -pthread $LIBS -lstdc++fs"
                # shellcheck disable=SC2086
                g++ -I. $CPPFLAGS -std=c++17 $CXXFLAGS "$TEMP_CPP" -o "$BIN" $LDFLAGS -pthread $LIBS -lstdc++fs &> "$LOG"
                ;;
            Darwin)
                [[ -n "$VERBOSE" ]] && echo "clang++ -I. $CPPFLAGS -std=c++17 -stdlib=libc++ $CXXFLAGS \"$TEMP_CPP\" -o \"$BIN\" $LDFLAGS $LIBS"
                # shellcheck disable=SC2086
                clang++ -I. $CPPFLAGS -std=c++17 -stdlib=libc++ $CXXFLAGS "$TEMP_CPP" -o "$BIN" $LDFLAGS $LIBS -lpthread &> "$LOG"
                ;;
            CYGWIN*)
                WTEMP_DIR=$(cygpath -w "$TEMP_DIR")
                WTEMP_CPP=$(cygpath -w "$TEMP_CPP")
                WBIN=$(cygpath -w "$BIN")
                createHelper
                [[ -n "$VERBOSE" ]] && echo "cl /EHsc /std:c++17 /nologo /D_UNICODE /DUNICODE /I. $CPPFLAGS $CXXFLAGS \"$WTEMP_CPP\" /Fo\"$WTEMP_DIR\\\" /Fe\"$WBIN\" $LDFLAGS $LIBS"
                # shellcheck disable=SC2086
                "$HELPER" /I. $CPPFLAGS $CXXFLAGS "$WTEMP_CPP" /Fo"$WTEMP_DIR\\" /Fe"$WBIN" $LDFLAGS $LIBS &> "$LOG"
                ;;
            MINGW*|MSYS*)
                WTEMP_DIR=$(cygpath -w "$TEMP_DIR")
                WTEMP_CPP=$(cygpath -w "$TEMP_CPP")
                WBIN=$(cygpath -w "$BIN")
                createHelper
                [[ -n "$VERBOSE" ]] && echo "cl /EHsc /std:c++17 /nologo /D_UNICODE /DUNICODE /I. $CPPFLAGS $CXXFLAGS \"$WTEMP_CPP\" /Fo\"$WTEMP_DIR\\\" /Fe\"$WBIN\" $LDFLAGS $LIBS"
                # shellcheck disable=SC2086
                "$HELPER" //I. $CPPFLAGS $CXXFLAGS "$WTEMP_CPP" //Fo"$WTEMP_DIR\\" //Fe"$WBIN" $LDFLAGS $LIBS &> "$LOG"
                ;;
            *)
                echo "Error: Unknown OS."
                ;;
        esac
    fi
}

function doExecute {
    if [ -f "$BIN" ]; then
        shift # removes first argument
        exec -a "$ORIG" "$BIN" "$@"
    else
        cat "$LOG"
    fi
}


# main
doPrepare
maybeCreate
removeHeader
calcHash
(doCompile)
doExecute "$@"
