#!/usr/bin/env bash

if [ $# -lt 1 ]; then
    echo "Use $0 as interpreter only."
    exit 1
fi

ORIG="$1"
BASE=$(basename "$ORIG")
DIR=$(dirname "$ORIG")

TEMP_DIR="/tmp/cppsh"
TEMP_CPP="$TEMP_DIR/$BASE"
BIN="$TEMP_DIR/${BASE%.cpp}.exe"
HELPER="$TEMP_DIR/compile.bat"
LOG="$TEMP_DIR/error.log"

function createHelper {
    # VS 2015
    if [ -n "$VS140COMNTOOLS" ]; then
        echo -e '@echo off\r\ncall "%VS140COMNTOOLS%..\\..\\VC\\bin\\amd64\\vcvars64.bat"\r\ncl /EHsc %*' > "$HELPER"
    # VS 2013
    elif [ -n "$VS120COMNTOOLS" ]; then
        echo -e '@echo off\r\ncall "%VS120COMNTOOLS%..\\..\\VC\\bin\\amd64\\vcvars64.bat"\r\ncl /EHsc %*' > "$HELPER"
    # VS 2012
    elif [ -n "$VS110COMNTOOLS" ]; then
        echo -e '@echo off\r\ncall "%VS110COMNTOOLS%..\\..\\VC\\bin\\amd64\\vcvars64.bat"\r\ncl /EHsc %*' > "$HELPER"
    fi
    chmod +x "$HELPER"
}

function pleaseRemove {
    if [ -f "$1" ]; then
        rm "$1"
    fi
}

function doPrepare {
    mkdir -p $TEMP_DIR
    pleaseRemove "$TEMP_CPP"
    pleaseRemove "$HELPER"
    pleaseRemove "$LOG"
}

function removeHeader {
    case $(head -n 1 "$ORIG" | xargs) in
        '#!'*)
            echo "// auto-generated" > "$TEMP_CPP"
            tail -n +2 "$ORIG" >> "$TEMP_CPP"
            ;;
        *)
            cp "$ORIG" "$TEMP_CPP"
            ;;
    esac
}

function calcHash {
    case $(uname) in
        Darwin)
            MD5SUM=$(md5 "$TEMP_CPP" | cut -d ' ' -f 4)
            ;;
        *)
            MD5SUM=$(md5sum "$TEMP_CPP" | cut -d ' ' -f 1)
            ;;
    esac
    BIN="$TEMP_DIR/$MD5SUM.exe"
}

function getFlags {
    CPPFLAGS=$(grep -Po '(?<=cppsh::CPPFLAGS).*' < "$TEMP_CPP")
    CXXFLAGS=$(grep -Po '(?<=cppsh::CXXFLAGS).*' < "$TEMP_CPP")
     LDFLAGS=$(grep -Po '(?<=cppsh::LDFLAGS).*'  < "$TEMP_CPP")
        LIBS=$(grep -Po '(?<=cppsh::LIBS).*'     < "$TEMP_CPP")
}

function doCompile {
    # compile, if not already compiled
    if [ ! -f "$BIN" ]; then

        getFlags
        cd "$DIR"

        case $(uname) in
            Linux)
                g++ -I"$DIR" $CPPFLAGS -std=c++1z $CXXFLAGS "$TEMP_CPP" -o "$BIN" $LDFLAGS -pthread $LIBS -lstdc++fs> "$LOG"
                ;;
            Darwin)
                clang++ -I"$DIR" $CPPFLAGS -std=c++1y -stdlib=libc++ $CXXFLAGS "$TEMP_CPP" -o "$BIN" $LDFLAGS $LIBS > "$LOG"
                ;;
            CYGWIN*)
                WTEMP_DIR=$(cygpath -w "$TEMP_DIR")
                WTEMP_CPP=$(cygpath -w "$TEMP_CPP")
                WBIN=$(cygpath -w "$BIN")
                createHelper
                "$HELPER" /D"_UNICODE" /D"UNICODE" /I"$DIR" $CPPFLAGS $CXXFLAGS "$WTEMP_CPP" /Fo"$WTEMP_DIR\\" /Fe"$WBIN" $LDFLAGS $LIBS 2> /dev/null 1> "$LOG"
                ;;
            *)
                echo "Error: Unknown OS."
                ;;
        esac
    fi
}

function doExecute {
    if [ -f "$BIN" ]; then
        shift # removes first argument
        exec -a "$ORIG" "$BIN" "$@"
    else
        cat "$LOG"
    fi
}


# main
doPrepare
removeHeader
calcHash
doCompile
doExecute "$@"
